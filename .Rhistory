makeVector <- function(x = numeric()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
cachemean <- function(x, ...) {
m <- x$getmean()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- mean(data, ...)
x$setmean(m)
m
}
x = rnorm(100)
x
makeVector(x)
y = makeVector(x)
y$set()
y$set
y = makeVector(x)
y$set
y$get
y$get()
y$getmean()
y$getmean
y$getmean()
y$getmean()
cachemean(y)
makeVector <- function(x = numeric()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
cachemean <- function(x, ...) {
m <- x$getmean()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- mean(data, ...)
x$setmean(m)
m
}
a = rnorm(100)
b = makeVector(x)
b$getmean()
b$get
b$get()
getmean()
b$get()
a = rnorm(100)
b = makeVector(a)
makeVector <- function(x = numeric()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
cachemean <- function(x, ...) {
m <- x$getmean()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- mean(data, ...)
x$setmean(m)
m
}
b = makeVector(a)
b$get()
b$getmean()
b$getmean()
cachemean(b)
b$getmean()
cachemean(b)
b$getmean()
d = makeVector()
d$set(rnorm(100))
d$get()
d$setmean()
d$setmean(mean(rnorm(100)))
d$getmean()
d$set()
m = matrix(x=1:20,nrow = 4, ncol = 5)
m = matrix(1:20,nrow = 4, ncol = 5)
m
inverse(m)
t(m)
m
View(m)
t(m)
makeCacheMatrix <- function(x = matrix()) {
v <- NULL
set <- function(y) {
x <<- y
v <<- NULL
}
get <- function() x
setinverse <- function(inverse) v <<- inverse
getinverse <- function() v
list(set = set, get = get,
setinverse = setinverse,
getinverse = getinverse)
}
## Write a short comment describing this function
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
v <- x$getinverse()
if(!is.null(v)) {
message("getting cached data")
return(v)
}
data <- x$get()
v <- t(data, ...)
x$setinverse(v)
v
}
a = matrix(1:20,4,5)
makeCacheMatrix(a)
b = makeCacheMatrix(a)
b$get()
b$getinverse()
cacheSolve(b)
b$getinverse()
